---
- name: Update package cache
  apt:
    update_cache: yes
    cache_valid_time: 3600

- name: Install Docker dependencies
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - software-properties-common
      - net-tools  # Includes netstat
    state: present

- name: Add Docker GPG key
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: Add Docker repository
  apt_repository:
    repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
    state: present

- name: Install Docker
  apt:
    name:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
    state: present

- name: Start and enable Docker
  systemd:
    name: docker
    state: started
    enabled: yes

- name: Add ubuntu user to docker group
  user:
    name: ubuntu
    groups: docker
    append: yes

- name: Download docker-compose
  get_url:
    url: "https://github.com/docker/compose/releases/download/v{{ docker.compose_version }}/docker-compose-linux-x86_64"
    dest: /usr/local/bin/docker-compose
    mode: '0755'
    owner: root
    group: root

- name: Create symbolic link for docker-compose
  file:
    src: /usr/local/bin/docker-compose
    dest: /usr/bin/docker-compose
    state: link

- name: Create directory for WireGuard
  file:
    path: "{{ wireguard.config_dir }}"
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Create directory for docker-compose
  file:
    path: /root/docker-wireguard
    state: directory
    mode: '0755'
    owner: root
    group: root

- name: Create docker-compose.yml file
  template:
    src: docker-compose.yml.j2
    dest: /root/docker-wireguard/docker-compose.yml
    mode: '0644'
    owner: root
    group: root
  notify:
    - restart wireguard container

- name: Configure firewall for WireGuard
  ufw:
    rule: allow
    port: "{{ wireguard.server_port }}"
    proto: udp

- name: Enable UFW
  ufw:
    state: enabled
    policy: deny
    direction: incoming

- name: Allow SSH in firewall
  ufw:
    rule: allow
    port: '22'
    proto: tcp

- name: Allow HTTPS in firewall
  ufw:
    rule: allow
    port: '443'
    proto: tcp

- name: Allow configuration server in firewall
  ufw:
    rule: allow
    port: '8080'
    proto: tcp

- name: Start WireGuard container
  shell: |
    cd /root/docker-wireguard
    docker-compose up -d
  register: docker_result

- name: Wait for container to be running
  shell: docker ps | grep wireguard | grep Up
  register: container_status
  until: container_status.rc == 0
  retries: 30
  delay: 2

- name: Wait for peer configurations to be generated
  shell: |
    # Wait for at least one peer directory to be created
    timeout=60
    while [ $timeout -gt 0 ]; do
      if [ -d "{{ wireguard.config_dir }}/peer1" ] && [ -f "{{ wireguard.config_dir }}/peer1/peer1.conf" ]; then
        echo "Configurations generated"
        exit 0
      fi
      sleep 2
      timeout=$((timeout-2))
    done
    echo "Timeout waiting for configurations"
    exit 1
  register: config_wait
  changed_when: false

- name: Configure download configurations script
  template:
    src: download-configs.sh.j2
    dest: /root/download-configs.sh
    mode: '0755'
    owner: root
    group: root

- name: Create simple HTTP server to download configurations
  template:
    src: serve-configs.py.j2
    dest: /root/serve-configs.py
    mode: '0755'
    owner: root
    group: root

- name: Debug - Show WireGuard container logs
  shell: docker logs wireguard --tail 20
  register: container_logs
  changed_when: false

- name: Show container logs
  debug:
    msg: "{{ container_logs.stdout_lines }}"

- name: Debug - Check directory structure
  shell: find {{ wireguard.config_dir }} -type f -name "*.conf" -o -name "*.png" 2>/dev/null || echo "No configuration files found"
  register: config_files
  changed_when: false

- name: Show found configuration files
  debug:
    msg: "{{ config_files.stdout_lines }}"

- name: Install Python3 for HTTP server
  apt:
    name: python3
    state: present

- name: Check if netstat is available
  shell: command -v netstat
  register: netstat_check
  changed_when: false
  failed_when: false

- name: Show netstat status
  debug:
    msg: "{{ 'netstat is available' if netstat_check.rc == 0 else 'WARNING: netstat is not available' }}"

- name: Check that configurations exist before starting HTTP server
  shell: ls -la {{ wireguard.config_dir }}/peer*/
  register: peer_check
  changed_when: false

- name: Show found configurations
  debug:
    msg: "{{ peer_check.stdout_lines }}"

- name: Kill previous configuration server processes
  shell: pkill -f serve-configs.py
  register: pkill_result
  failed_when: false
  changed_when: pkill_result.rc == 0

- name: Start HTTP server for configurations (port 8080)
  shell: |
    cd {{ wireguard.config_dir }}
    nohup python3 /root/serve-configs.py > /var/log/config-server.log 2>&1 &
    echo $! > /var/run/config-server.pid
  changed_when: true

- name: Check if HTTP server is running
  shell: netstat -tlnp | grep :8080
  register: http_server_check
  changed_when: false
  ignore_errors: yes

- name: Show HTTP server status
  debug:
    msg: "{{ 'HTTP server running on port 8080' if http_server_check.rc == 0 else 'Error: HTTP server is not running' }}"
