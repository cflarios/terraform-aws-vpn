name: üåç Deploy Multi-Region VPN Network

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment name'
        required: true
        default: 'multi-region'
        type: string
      regions:
        description: 'AWS regions (comma-separated)'
        required: true
        default: 'us-east-1,eu-west-1,ap-southeast-1'
        type: string
      instance_type:
        description: 'EC2 instance type for all regions'
        required: true
        default: 't3.micro'
        type: choice
        options:
          - 't3.micro'
          - 't3.small'
          - 't3.medium'
      wireguard_peers:
        description: 'Number of WireGuard clients per region'
        required: true
        default: '3'
        type: string

env:
  TF_VAR_environment: ${{ github.event.inputs.environment }}
  TF_VAR_instance_type: ${{ github.event.inputs.instance_type }}

jobs:
  validate-regions:
    name: ‚úÖ Validate Regions
    runs-on: ubuntu-latest
    
    outputs:
      regions_matrix: ${{ steps.parse_regions.outputs.regions_matrix }}
      regions_list: ${{ steps.parse_regions.outputs.regions_list }}
      
    steps:
      - name: üìã Parse and Validate Regions
        id: parse_regions
        run: |
          # Parse comma-separated regions
          REGIONS="${{ github.event.inputs.regions }}"
          echo "Input regions: $REGIONS"
          
          # Remove spaces and convert to array
          REGIONS_CLEAN=$(echo "$REGIONS" | tr -d ' ')
          IFS=',' read -ra REGIONS_ARRAY <<< "$REGIONS_CLEAN"
          
          # Validate regions
          VALID_REGIONS=("us-east-1" "us-east-2" "us-west-1" "us-west-2" "eu-west-1" "eu-west-2" "eu-central-1" "ap-southeast-1" "ap-southeast-2" "ap-northeast-1")
          
          VALIDATED_REGIONS=()
          for region in "${REGIONS_ARRAY[@]}"; do
            if [[ " ${VALID_REGIONS[@]} " =~ " ${region} " ]]; then
              VALIDATED_REGIONS+=("$region")
              echo "‚úÖ Valid region: $region"
            else
              echo "‚ùå Invalid region: $region"
              exit 1
            fi
          done
          
          # Check for duplicates
          UNIQUE_REGIONS=($(printf "%s\n" "${VALIDATED_REGIONS[@]}" | sort -u))
          if [ ${#VALIDATED_REGIONS[@]} -ne ${#UNIQUE_REGIONS[@]} ]; then
            echo "‚ùå Duplicate regions found!"
            exit 1
          fi
          
          # Create matrix for parallel jobs
          MATRIX_JSON=$(printf '%s\n' "${VALIDATED_REGIONS[@]}" | jq -R -s -c 'split("\n")[:-1] | map({region: .})')
          echo "regions_matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          
          # Create comma-separated list for summary
          REGIONS_LIST=$(printf '%s,' "${VALIDATED_REGIONS[@]}")
          REGIONS_LIST=${REGIONS_LIST%,}  # Remove trailing comma
          echo "regions_list=$REGIONS_LIST" >> $GITHUB_OUTPUT
          
          echo "üéØ Validated regions: $REGIONS_LIST"
          echo "üìä Total regions: ${#VALIDATED_REGIONS[@]}"

  deploy-multi-region:
    name: üöÄ Deploy in ${{ matrix.region }}
    runs-on: ubuntu-latest
    needs: validate-regions
    
    strategy:
      matrix:
        include: ${{ fromJson(needs.validate-regions.outputs.regions_matrix) }}
      max-parallel: 5  # Deploy max 5 regions simultaneously
      fail-fast: false  # Continue with other regions even if one fails
    
    outputs:
      instance_ip: ${{ steps.terraform_output.outputs.instance_ip }}
      region: ${{ matrix.region }}
      
    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîß Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}

      - name: üèóÔ∏è Setup Backend for ${{ matrix.region }}
        id: setup_backend
        run: |
          echo "üèóÔ∏è Setting up backend for region: ${{ matrix.region }}"
          
          # Create region-specific backend configuration
          RANDOM_ID=$(openssl rand -hex 4)
          BUCKET_NAME="terraform-state-vpn-${{ matrix.region }}-${RANDOM_ID}"
          TABLE_NAME="terraform-state-locks-vpn-${{ matrix.region }}"
          
          # Check if backend already exists
          if aws ssm get-parameter --name "/vpn/${{ github.event.inputs.environment }}/${{ matrix.region }}/backend-bucket" 2>/dev/null; then
            # Use existing backend
            BUCKET_NAME=$(aws ssm get-parameter \
              --name "/vpn/${{ github.event.inputs.environment }}/${{ matrix.region }}/backend-bucket" \
              --query 'Parameter.Value' \
              --output text)
            
            TABLE_NAME=$(aws ssm get-parameter \
              --name "/vpn/${{ github.event.inputs.environment }}/${{ matrix.region }}/backend-table" \
              --query 'Parameter.Value' \
              --output text)
            
            echo "‚úÖ Using existing backend for ${{ matrix.region }}"
          else
            echo "üÜï Creating new backend for ${{ matrix.region }}"
            
            # Create S3 bucket
            if [ "${{ matrix.region }}" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BUCKET_NAME" --region ${{ matrix.region }}
            else
              aws s3api create-bucket \
                --bucket "$BUCKET_NAME" \
                --region ${{ matrix.region }} \
                --create-bucket-configuration LocationConstraint=${{ matrix.region }}
            fi
            
            # Configure bucket
            aws s3api put-bucket-versioning \
              --bucket "$BUCKET_NAME" \
              --versioning-configuration Status=Enabled
            
            aws s3api put-bucket-encryption \
              --bucket "$BUCKET_NAME" \
              --server-side-encryption-configuration '{
                "Rules": [
                  {
                    "ApplyServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }'
            
            aws s3api put-public-access-block \
              --bucket "$BUCKET_NAME" \
              --public-access-block-configuration \
              BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
            
            # Create DynamoDB table
            if ! aws dynamodb describe-table --table-name "$TABLE_NAME" 2>/dev/null; then
              aws dynamodb create-table \
                --table-name "$TABLE_NAME" \
                --attribute-definitions AttributeName=LockID,AttributeType=S \
                --key-schema AttributeName=LockID,KeyType=HASH \
                --billing-mode PAY_PER_REQUEST \
                --sse-specification Enabled=true
              
              aws dynamodb wait table-exists --table-name "$TABLE_NAME"
            fi
            
            # Store backend configuration
            aws ssm put-parameter \
              --name "/vpn/${{ github.event.inputs.environment }}/${{ matrix.region }}/backend-bucket" \
              --value "$BUCKET_NAME" \
              --type "String" \
              --overwrite
            
            aws ssm put-parameter \
              --name "/vpn/${{ github.event.inputs.environment }}/${{ matrix.region }}/backend-table" \
              --value "$TABLE_NAME" \
              --type "String" \
              --overwrite
          fi
          
          echo "backend_bucket=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "backend_table=$TABLE_NAME" >> $GITHUB_OUTPUT
          
          echo "‚úÖ Backend ready for ${{ matrix.region }}: $BUCKET_NAME"

      - name: üèóÔ∏è Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: üîë Generate SSH Key for ${{ matrix.region }}
        id: ssh_key
        run: |
          mkdir -p ~/.ssh
          KEY_NAME="vpn-server-key-${{ matrix.region }}"
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/$KEY_NAME -N "" -C "github-actions-vpn-key-${{ matrix.region }}-$(date +%s)"
          chmod 600 ~/.ssh/$KEY_NAME
          chmod 644 ~/.ssh/$KEY_NAME.pub
          echo "‚úÖ SSH key generated for ${{ matrix.region }}"

      - name: üíæ Store SSH Keys in Parameter Store
        run: |
          KEY_NAME="vpn-server-key-${{ matrix.region }}"
          
          # Store private key
          aws ssm put-parameter \
            --name "/vpn/${{ github.event.inputs.environment }}/${{ matrix.region }}/ssh-private-key" \
            --value "$(cat ~/.ssh/$KEY_NAME)" \
            --type "SecureString" \
            --overwrite \
            --description "VPN SSH Private Key for ${{ github.event.inputs.environment }} in ${{ matrix.region }}"
          
          # Store public key
          aws ssm put-parameter \
            --name "/vpn/${{ github.event.inputs.environment }}/${{ matrix.region }}/ssh-public-key" \
            --value "$(cat ~/.ssh/$KEY_NAME.pub)" \
            --type "String" \
            --overwrite \
            --description "VPN SSH Public Key for ${{ github.event.inputs.environment }} in ${{ matrix.region }}"
          
          echo "‚úÖ SSH keys stored in Parameter Store for ${{ matrix.region }}"

      - name: üöÄ Deploy Infrastructure in ${{ matrix.region }}
        working-directory: ./terraform
        run: |
          # Set region-specific variables
          export TF_VAR_aws_region="${{ matrix.region }}"
          export TF_VAR_ssh_public_key="$(cat ~/.ssh/vpn-server-key-${{ matrix.region }}.pub)"
          
          # Initialize Terraform with region-specific backend
          terraform init \
            -backend-config="bucket=${{ steps.setup_backend.outputs.backend_bucket }}" \
            -backend-config="key=vpn-${{ github.event.inputs.environment }}-${{ matrix.region }}/terraform.tfstate" \
            -backend-config="region=${{ matrix.region }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=${{ steps.setup_backend.outputs.backend_table }}"
          
          # Plan and apply
          terraform plan -out=tfplan-${{ matrix.region }}
          terraform apply -auto-approve tfplan-${{ matrix.region }}

      - name: üì§ Get Terraform Outputs
        id: terraform_output
        working-directory: ./terraform
        run: |
          INSTANCE_IP=$(terraform output -raw instance_public_ip)
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          
          # Store instance IP in Parameter Store
          aws ssm put-parameter \
            --name "/vpn/${{ github.event.inputs.environment }}/${{ matrix.region }}/instance-ip" \
            --value "$INSTANCE_IP" \
            --type "String" \
            --overwrite \
            --description "VPN Instance IP for ${{ github.event.inputs.environment }} in ${{ matrix.region }}"
          
          echo "‚úÖ Infrastructure deployed in ${{ matrix.region }}: $INSTANCE_IP"

      - name: üîß Configure WireGuard in ${{ matrix.region }}
        run: |
          # Get SSH key
          aws ssm get-parameter \
            --name "/vpn/${{ github.event.inputs.environment }}/${{ matrix.region }}/ssh-private-key" \
            --with-decryption \
            --query 'Parameter.Value' \
            --output text > ~/.ssh/vpn-server-key-${{ matrix.region }}
          
          chmod 600 ~/.ssh/vpn-server-key-${{ matrix.region }}
          
          # Install Ansible
          python -m pip install --upgrade pip
          pip install ansible
          
          # Create region-specific inventory
          mkdir -p ansible-${{ matrix.region }}
          cp -r ansible/* ansible-${{ matrix.region }}/
          
          echo "[vpn_servers]" > ansible-${{ matrix.region }}/inventory.ini
          echo "vpn-server ansible_host=${{ steps.terraform_output.outputs.instance_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/vpn-server-key-${{ matrix.region }} ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> ansible-${{ matrix.region }}/inventory.ini
          
          # Update peers configuration
          sed -i "s/peers: 3/peers: ${{ github.event.inputs.wireguard_peers }}/" ansible-${{ matrix.region }}/group_vars/all.yml
          
          # Wait for instance to be ready
          INSTANCE_IP="${{ steps.terraform_output.outputs.instance_ip }}"
          echo "‚è≥ Waiting for EC2 instance in ${{ matrix.region }} to be ready..."
          
          for i in {1..20}; do
            if ssh -i ~/.ssh/vpn-server-key-${{ matrix.region }} -o ConnectTimeout=10 -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "echo 'SSH Ready'" 2>/dev/null; then
              echo "‚úÖ EC2 instance in ${{ matrix.region }} is ready!"
              break
            fi
            echo "‚è≥ Attempt $i/20: Instance not ready yet, waiting 30 seconds..."
            sleep 30
          done
          
          # Run Ansible playbook
          cd ansible-${{ matrix.region }}
          ansible-playbook -i inventory.ini site.yml
          
          echo "üéâ WireGuard configured in ${{ matrix.region }}!"

  create-summary:
    name: üìä Create Deployment Summary
    runs-on: ubuntu-latest
    needs: [validate-regions, deploy-multi-region]
    if: always()  # Run even if some deployments failed
    
    steps:
      - name: üîß Configure AWS Credentials (us-east-1 for parameter retrieval)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: üìä Collect Deployment Results
        run: |
          echo "üåç Multi-Region VPN Deployment Summary"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          
          # Get all regions that were supposed to be deployed
          REGIONS="${{ needs.validate-regions.outputs.regions_list }}"
          IFS=',' read -ra REGIONS_ARRAY <<< "$REGIONS"
          
          SUCCESSFUL_DEPLOYMENTS=()
          FAILED_DEPLOYMENTS=()
          
          for region in "${REGIONS_ARRAY[@]}"; do
            echo "üîç Checking deployment status for $region..."
            
            # Try to get instance IP from Parameter Store
            if INSTANCE_IP=$(aws ssm get-parameter \
              --name "/vpn/${{ github.event.inputs.environment }}/$region/instance-ip" \
              --query 'Parameter.Value' \
              --output text \
              --region $region 2>/dev/null); then
              
              SUCCESSFUL_DEPLOYMENTS+=("$region:$INSTANCE_IP")
              echo "‚úÖ $region: $INSTANCE_IP"
            else
              FAILED_DEPLOYMENTS+=("$region")
              echo "‚ùå $region: Failed"
            fi
          done
          
          echo ""
          echo "üìà Deployment Results:"
          echo "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê"
          echo "‚úÖ Successful: ${#SUCCESSFUL_DEPLOYMENTS[@]} regions"
          echo "‚ùå Failed: ${#FAILED_DEPLOYMENTS[@]} regions"
          echo ""
          
          if [ ${#SUCCESSFUL_DEPLOYMENTS[@]} -gt 0 ]; then
            echo "üåê Active VPN Servers:"
            for deployment in "${SUCCESSFUL_DEPLOYMENTS[@]}"; do
              IFS=':' read -ra ADDR <<< "$deployment"
              region="${ADDR[0]}"
              ip="${ADDR[1]}"
              echo "  üåç $region: http://$ip:8080"
            done
          fi
          
          if [ ${#FAILED_DEPLOYMENTS[@]} -gt 0 ]; then
            echo ""
            echo "‚ùå Failed Deployments:"
            for region in "${FAILED_DEPLOYMENTS[@]}"; do
              echo "  üö´ $region"
            done
          fi
          
          # Store results for summary
          echo "SUCCESSFUL_COUNT=${#SUCCESSFUL_DEPLOYMENTS[@]}" >> $GITHUB_ENV
          echo "FAILED_COUNT=${#FAILED_DEPLOYMENTS[@]}" >> $GITHUB_ENV
          
          # Create formatted lists for summary
          if [ ${#SUCCESSFUL_DEPLOYMENTS[@]} -gt 0 ]; then
            SUCCESSFUL_LIST=""
            for deployment in "${SUCCESSFUL_DEPLOYMENTS[@]}"; do
              IFS=':' read -ra ADDR <<< "$deployment"
              region="${ADDR[0]}"
              ip="${ADDR[1]}"
              SUCCESSFUL_LIST="$SUCCESSFUL_LIST- **$region**: [http://$ip:8080](http://$ip:8080)%0A"
            done
            echo "SUCCESSFUL_LIST=$SUCCESSFUL_LIST" >> $GITHUB_ENV
          fi

      - name: üìã Create GitHub Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # üåç Multi-Region VPN Deployment Complete!
          
          ## üìä Deployment Statistics
          - **Environment**: ${{ github.event.inputs.environment }}
          - **Regions Requested**: ${{ needs.validate-regions.outputs.regions_list }}
          - **Instance Type**: ${{ github.event.inputs.instance_type }}
          - **WireGuard Peers per Region**: ${{ github.event.inputs.wireguard_peers }}
          - **‚úÖ Successful Deployments**: $SUCCESSFUL_COUNT
          - **‚ùå Failed Deployments**: $FAILED_COUNT
          
          EOF
          
          if [ "$SUCCESSFUL_COUNT" -gt 0 ]; then
            cat >> $GITHUB_STEP_SUMMARY << EOF
          ## üåê Active VPN Servers
          
          $SUCCESSFUL_LIST
          
          ## üì± How to Connect
          1. Visit any of the web interfaces above
          2. Download \`.conf\` files for desktop clients
          3. Download \`.png\` files (QR codes) for mobile apps
          4. Import configurations into WireGuard clients
          5. Choose the server closest to your location for best performance
          
          EOF
          fi
          
          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## üõ†Ô∏è Management
          
          ### SSH Access to Servers
          Use the region-specific keys stored in AWS Parameter Store:
          \`\`\`bash
          # Get SSH key for a specific region
          aws ssm get-parameter --name "/vpn/${{ github.event.inputs.environment }}/REGION/ssh-private-key" --with-decryption --query 'Parameter.Value' --output text > ~/.ssh/vpn-key-REGION
          chmod 600 ~/.ssh/vpn-key-REGION
          
          # Connect to server
          ssh -i ~/.ssh/vpn-key-REGION ubuntu@SERVER_IP
          \`\`\`
          
          ### ‚ö†Ô∏è Important Notes
          - Each region has its own independent VPN server
          - Each region has its own backend state and SSH keys
          - To destroy all servers, use the **"Destroy Multi-Region VPN"** workflow
          - Monitor costs across all regions in AWS Console
          
          EOF

      - name: üéâ Final Success Message
        if: env.SUCCESSFUL_COUNT > 0
        run: |
          echo "üéä Multi-Region VPN Network Deployed Successfully!"
          echo "‚úÖ $SUCCESSFUL_COUNT out of $(echo '${{ needs.validate-regions.outputs.regions_list }}' | tr ',' '\n' | wc -l) regions deployed"
          echo "üåç Your global VPN network is ready to use!"
