name: 🚀 Deploy VPN Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment name'
        required: true
        default: 'dev'
        type: string
      instance_type:
        description: 'EC2 instance type'
        required: true
        default: 't3.micro'
        type: choice
        options:
          - 't3.micro'
          - 't3.small'
          - 't3.medium'
      wireguard_peers:
        description: 'Number of WireGuard clients'
        required: true
        default: '3'
        type: string

env:
  AWS_REGION: us-east-1
  TF_VAR_environment: ${{ github.event.inputs.environment }}
  TF_VAR_instance_type: ${{ github.event.inputs.instance_type }}

jobs:
  setup-backend:
    name: 🔧 Setup Terraform Backend
    runs-on: ubuntu-latest
    
    outputs:
      backend_bucket: ${{ steps.setup_backend.outputs.backend_bucket }}
      backend_table: ${{ steps.setup_backend.outputs.backend_table }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🏗️ Setup Terraform Backend Infrastructure
        id: setup_backend
        run: |
          # Try to find existing backend configuration first
          echo "🔍 Checking for existing backend configuration..."
          
          if aws ssm get-parameter --name "/vpn/${{ github.event.inputs.environment }}/backend-bucket" 2>/dev/null; then
            # Use existing backend
            BUCKET_NAME=$(aws ssm get-parameter \
              --name "/vpn/${{ github.event.inputs.environment }}/backend-bucket" \
              --query 'Parameter.Value' \
              --output text)
            
            TABLE_NAME=$(aws ssm get-parameter \
              --name "/vpn/${{ github.event.inputs.environment }}/backend-table" \
              --query 'Parameter.Value' \
              --output text)
            
            echo "✅ Found existing backend configuration:"
            echo "   🪣 S3 Bucket: $BUCKET_NAME"
            echo "   🗄️ DynamoDB Table: $TABLE_NAME"
          else
            # Create new backend
            echo "🏗️ Creating new backend infrastructure..."
            RANDOM_ID=$(openssl rand -hex 4)
            BUCKET_NAME="terraform-state-vpn-${RANDOM_ID}"
            TABLE_NAME="terraform-state-locks-vpn"
            
            echo "🪣 Creating S3 bucket: $BUCKET_NAME"
            
            # Create S3 bucket for Terraform state (fix for us-east-1)
            if [ "${{ env.AWS_REGION }}" = "us-east-1" ]; then
              aws s3api create-bucket --bucket "$BUCKET_NAME" --region ${{ env.AWS_REGION }}
            else
              aws s3api create-bucket \
                --bucket "$BUCKET_NAME" \
                --region ${{ env.AWS_REGION }} \
                --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }}
            fi
            
            # Enable versioning
            aws s3api put-bucket-versioning \
              --bucket "$BUCKET_NAME" \
              --versioning-configuration Status=Enabled
            
            # Enable encryption
            aws s3api put-bucket-encryption \
              --bucket "$BUCKET_NAME" \
              --server-side-encryption-configuration '{
                "Rules": [
                  {
                    "ApplyServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }'
            
            # Block public access
            aws s3api put-public-access-block \
              --bucket "$BUCKET_NAME" \
              --public-access-block-configuration \
              BlockPublicAcls=true,IgnorePublicAcls=true,BlockPublicPolicy=true,RestrictPublicBuckets=true
            
            echo "✅ S3 bucket $BUCKET_NAME created successfully"
            
            echo "🗄️ Creating DynamoDB table: $TABLE_NAME"
            
            # Check if table already exists
            if aws dynamodb describe-table --table-name "$TABLE_NAME" 2>/dev/null; then
              echo "✅ DynamoDB table $TABLE_NAME already exists"
            else
              # Create DynamoDB table for state locking
              aws dynamodb create-table \
                --table-name "$TABLE_NAME" \
                --attribute-definitions AttributeName=LockID,AttributeType=S \
                --key-schema AttributeName=LockID,KeyType=HASH \
                --billing-mode PAY_PER_REQUEST \
                --sse-specification Enabled=true
              
              # Wait for table to be active
              echo "⏳ Waiting for DynamoDB table to be active..."
              aws dynamodb wait table-exists --table-name "$TABLE_NAME"
              echo "✅ DynamoDB table $TABLE_NAME created successfully"
            fi
            
            # Store backend configuration for future use
            aws ssm put-parameter \
              --name "/vpn/${{ github.event.inputs.environment }}/backend-bucket" \
              --value "$BUCKET_NAME" \
              --type "String" \
              --overwrite \
              --description "Terraform Backend S3 Bucket"
            
            aws ssm put-parameter \
              --name "/vpn/${{ github.event.inputs.environment }}/backend-table" \
              --value "$TABLE_NAME" \
              --type "String" \
              --overwrite \
              --description "Terraform Backend DynamoDB Table"
          fi
          
          # Store configuration in GitHub environment
          echo "backend_bucket=$BUCKET_NAME" >> $GITHUB_OUTPUT
          echo "backend_table=$TABLE_NAME" >> $GITHUB_OUTPUT
          
          echo "🎉 Backend setup completed!"
          echo "📋 Configuration:"
          echo "   🪣 S3 Bucket: $BUCKET_NAME"
          echo "   🗄️ DynamoDB Table: $TABLE_NAME"
          echo "   🌍 Region: ${{ env.AWS_REGION }}"

  deploy-infrastructure:
    name: 🏗️ Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: setup-backend
    
    outputs:
      instance_ip: ${{ steps.terraform_output.outputs.instance_ip }}
      
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: 🔑 Generate SSH Key
        id: ssh_key
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/vpn-server-key -N "" -C "github-actions-vpn-key-$(date +%s)"
          chmod 600 ~/.ssh/vpn-server-key
          chmod 644 ~/.ssh/vpn-server-key.pub
          echo "SSH key generated successfully"

      - name: 💾 Store SSH Keys in AWS Parameter Store
        run: |
          # Store private key
          aws ssm put-parameter \
            --name "/vpn/${{ github.event.inputs.environment }}/ssh-private-key" \
            --value "$(cat ~/.ssh/vpn-server-key)" \
            --type "SecureString" \
            --overwrite \
            --description "VPN SSH Private Key for ${{ github.event.inputs.environment }}"
          
          # Store public key
          aws ssm put-parameter \
            --name "/vpn/${{ github.event.inputs.environment }}/ssh-public-key" \
            --value "$(cat ~/.ssh/vpn-server-key.pub)" \
            --type "String" \
            --overwrite \
            --description "VPN SSH Public Key for ${{ github.event.inputs.environment }}"
          
          echo "✅ SSH keys stored in Parameter Store"

      - name: 🚀 Terraform Init with Remote Backend
        working-directory: ./terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ needs.setup-backend.outputs.backend_bucket }}" \
            -backend-config="key=vpn-${{ github.event.inputs.environment }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="encrypt=true" \
            -backend-config="dynamodb_table=${{ needs.setup-backend.outputs.backend_table }}"

      - name: 📋 Terraform Plan
        working-directory: ./terraform
        run: |
          # Pass SSH public key as variable
          export TF_VAR_ssh_public_key="$(cat ~/.ssh/vpn-server-key.pub)"
          terraform plan -out=tfplan

      - name: ✅ Terraform Apply
        working-directory: ./terraform
        run: |
          # Pass SSH public key as variable
          export TF_VAR_ssh_public_key="$(cat ~/.ssh/vpn-server-key.pub)"
          terraform apply -auto-approve tfplan

      - name: 📤 Get Terraform Outputs
        id: terraform_output
        working-directory: ./terraform
        run: |
          INSTANCE_IP=$(terraform output -raw instance_public_ip)
          echo "instance_ip=$INSTANCE_IP" >> $GITHUB_OUTPUT
          echo "Instance IP: $INSTANCE_IP"
          
          # Store instance IP in Parameter Store for destroy workflow and future use
          aws ssm put-parameter \
            --name "/vpn/${{ github.event.inputs.environment }}/instance-ip" \
            --value "$INSTANCE_IP" \
            --type "String" \
            --overwrite \
            --description "VPN Instance IP for ${{ github.event.inputs.environment }}"

      - name: 📊 Show Deployment Summary
        run: |
          echo "🎉 Infrastructure deployed successfully!"
          echo "═══════════════════════════════════════"
          echo "🌍 Environment: ${{ github.event.inputs.environment }}"
          echo "🖥️  Instance Type: ${{ github.event.inputs.instance_type }}"
          echo "🌐 Instance IP: ${{ steps.terraform_output.outputs.instance_ip }}"
          echo "📦 WireGuard Peers: ${{ github.event.inputs.wireguard_peers }}"
          echo "═══════════════════════════════════════"

  configure-wireguard:
    name: 🔧 Configure WireGuard
    runs-on: ubuntu-latest
    needs: [setup-backend, deploy-infrastructure]
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🔑 Retrieve SSH Keys from Parameter Store
        run: |
          mkdir -p ~/.ssh
          
          # Get private key
          aws ssm get-parameter \
            --name "/vpn/${{ github.event.inputs.environment }}/ssh-private-key" \
            --with-decryption \
            --query 'Parameter.Value' \
            --output text > ~/.ssh/vpn-server-key
          
          # Get public key
          aws ssm get-parameter \
            --name "/vpn/${{ github.event.inputs.environment }}/ssh-public-key" \
            --query 'Parameter.Value' \
            --output text > ~/.ssh/vpn-server-key.pub
          
          chmod 600 ~/.ssh/vpn-server-key
          chmod 644 ~/.ssh/vpn-server-key.pub
          
          echo "✅ SSH keys retrieved from Parameter Store"

      - name: 🐍 Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: 📦 Install Ansible
        run: |
          python -m pip install --upgrade pip
          pip install ansible

      - name: 📝 Update Ansible inventory
        run: |
          echo "[vpn_servers]" > ansible/inventory.ini
          echo "vpn-server ansible_host=${{ needs.deploy-infrastructure.outputs.instance_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/vpn-server-key ansible_ssh_common_args='-o StrictHostKeyChecking=no'" >> ansible/inventory.ini

      - name: 📝 Update WireGuard peers configuration
        run: |
          sed -i "s/peers: 3/peers: ${{ github.event.inputs.wireguard_peers }}/" ansible/group_vars/all.yml

      - name: ⏳ Wait for EC2 instance to be ready
        run: |
          echo "⏳ Waiting for EC2 instance to be ready for SSH..."
          INSTANCE_IP="${{ needs.deploy-infrastructure.outputs.instance_ip }}"
          
          for i in {1..30}; do
            if ssh -i ~/.ssh/vpn-server-key -o ConnectTimeout=10 -o StrictHostKeyChecking=no ubuntu@$INSTANCE_IP "echo 'SSH Ready'" 2>/dev/null; then
              echo "✅ EC2 instance is ready!"
              break
            fi
            echo "⏳ Attempt $i/30: Instance not ready yet, waiting 30 seconds..."
            sleep 30
          done

      - name: 🚀 Run Ansible Playbook
        working-directory: ./ansible
        run: |
          ansible-playbook -i inventory.ini site.yml

      - name: 🎉 Show Final Instructions
        run: |
          INSTANCE_IP="${{ needs.deploy-infrastructure.outputs.instance_ip }}"
          echo "🎊 VPN Server Ready!"
          echo "════════════════════════════════════════════════════"
          echo "🌐 Server IP: $INSTANCE_IP"
          echo "🌍 Web Interface: http://$INSTANCE_IP:8080"
          echo "📱 WireGuard Clients: ${{ github.event.inputs.wireguard_peers }}"
          echo "════════════════════════════════════════════════════"
          echo ""
          echo "📋 Next Steps:"
          echo "1. 🌐 Go to: http://$INSTANCE_IP:8080"
          echo "2. 📱 Download .conf files for desktop clients"
          echo "3. 📱 Download .png files (QR codes) for mobile"
          echo "4. 🔧 Import configs into WireGuard clients"
          echo "5. 🚀 Connect and enjoy your VPN!"
          echo ""
          echo "💡 To destroy this infrastructure:"
          echo "   Go to Actions → 'Destroy VPN Infrastructure'"
          echo "   Enter 'DESTROY' to confirm"

      - name: 📊 Create Deployment Summary
        run: |
          INSTANCE_IP="${{ needs.deploy-infrastructure.outputs.instance_ip }}"
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🎉 VPN Deployment Successful!
          
          ## 📋 Deployment Information
          - **Environment**: ${{ github.event.inputs.environment }}
          - **Instance Type**: ${{ github.event.inputs.instance_type }}
          - **Instance IP**: $INSTANCE_IP
          - **WireGuard Clients**: ${{ github.event.inputs.wireguard_peers }}
          - **Backend Bucket**: ${{ needs.setup-backend.outputs.backend_bucket }}
          - **Backend Table**: ${{ needs.setup-backend.outputs.backend_table }}
          
          ## 📱 Access Your VPN
          🌐 **Web Interface**: [http://$INSTANCE_IP:8080](http://$INSTANCE_IP:8080)
          
          ## 🔧 Management Commands
          \`\`\`bash
          # SSH Access
          ssh -i ~/.ssh/vpn-server-key ubuntu@$INSTANCE_IP
          
          # Check WireGuard Status  
          ssh -i ~/.ssh/vpn-server-key ubuntu@$INSTANCE_IP 'sudo docker logs wireguard'
          \`\`\`
          
          ## ⚠️ Important
          - Download your VPN configurations from the web interface
          - **Remember to destroy** the infrastructure when finished
          - Use the **"Destroy VPN Infrastructure"** workflow to clean up
          EOF