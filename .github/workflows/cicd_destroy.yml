name: 🗑️ Destroy VPN Infrastructure

on:
  workflow_dispatch:
    inputs:
      confirmation:
        description: 'Type "DESTROY" to confirm destruction'
        required: true
        type: string
      environment:
        description: 'Environment name to destroy'
        required: true
        default: 'dev'
        type: string

env:
  AWS_REGION: us-east-1
  TF_VAR_environment: ${{ github.event.inputs.environment }}

jobs:
  destroy-infrastructure:
    name: 🗑️ Destroy Infrastructure
    runs-on: ubuntu-latest
    
    steps:
      - name: ✋ Validate Confirmation
        run: |
          if [ "${{ github.event.inputs.confirmation }}" != "DESTROY" ]; then
            echo "❌ Invalid confirmation. You must type 'DESTROY' to proceed."
            echo "🛡️ This is a safety measure to prevent accidental destruction."
            exit 1
          fi
          echo "✅ Confirmation validated. Proceeding with destruction..."

      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔧 Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: 🏗️ Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.5.0"

      - name: 🔑 Generate Temporary SSH Key (for state consistency)
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -t rsa -b 4096 -f ~/.ssh/vpn-server-key -N "" -C "github-actions-destroy-key"
          chmod 600 ~/.ssh/vpn-server-key
          chmod 644 ~/.ssh/vpn-server-key.pub

      - name: 🚀 Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: 📋 Terraform Plan Destroy
        working-directory: ./terraform
        run: terraform plan -destroy -out=destroy-plan

      - name: 🗑️ Terraform Destroy
        working-directory: ./terraform
        run: terraform apply -auto-approve destroy-plan

      - name: ✅ Cleanup Verification
        run: |
          echo "🎉 Infrastructure destroyed successfully!"
          echo "======================================="
          echo ""
          echo "✅ All AWS resources have been terminated"
          echo "💰 You are no longer being charged for VPN infrastructure"
          echo ""
          echo "📋 What was destroyed:"
          echo "  - EC2 Instance"
          echo "  - VPC and related networking"
          echo "  - Security Groups" 
          echo "  - Key Pairs"
          echo ""
          echo "🔄 You can redeploy anytime using the 'Deploy VPN Infrastructure' workflow"

      - name: 📊 Create Destruction Summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🗑️ VPN Infrastructure Destroyed
          
          ## ✅ Destruction Complete
          - **Environment**: ${{ github.event.inputs.environment }}
          - **Status**: All resources successfully destroyed
          - **Cost Impact**: No longer incurring charges
          
          ## 📋 Resources Destroyed
          - EC2 Instance (WireGuard server)
          - VPC and networking components
          - Security Groups
          - SSH Key Pairs
          
          ## 🔄 Next Steps
          - You can redeploy anytime using the **"Deploy VPN Infrastructure"** workflow
          - All configurations will be freshly generated on next deployment
          - Remember to download new client configs after redeployment
          
          ## 💡 Tips
          - Consider saving your WireGuard client configurations locally
          - Document any custom settings for future deployments
          EOF

  cleanup-artifacts:
    name: 🧹 Cleanup Artifacts
    runs-on: ubuntu-latest
    needs: destroy-infrastructure
    if: always()
    
    steps:
      - name: 🧹 Clean up old artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name === 'infrastructure-info') {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
                console.log(`Deleted artifact: ${artifact.name}`);
              }
            }
